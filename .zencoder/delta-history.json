{"snapshots":{"C:/Users/isacataria/Documents/GitHub/AudioRecorder/app/src/main/java/com/dimowner/audiorecorder/app/UploadService.java":{"filePath":"C:/Users/isacataria/Documents/GitHub/AudioRecorder/app/src/main/java/com/dimowner/audiorecorder/app/UploadService.java","baseContent":"/*\n * Foreground service to upload an audio file as multipart/form-data\n */\npackage com.dimowner.audiorecorder.app;\n\nimport static android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_DATA_SYNC;\n\nimport android.app.Notification;\nimport android.app.NotificationChannel;\nimport android.app.NotificationManager;\nimport android.app.PendingIntent;\nimport android.app.Service;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.graphics.Color;\nimport android.os.Build;\nimport android.os.IBinder;\n\nimport androidx.annotation.Nullable;\nimport androidx.annotation.RequiresApi;\nimport androidx.core.app.NotificationCompat;\nimport androidx.core.app.NotificationManagerCompat;\n\nimport android.widget.Toast;\n\nimport com.dimowner.audiorecorder.ARApplication;\nimport com.dimowner.audiorecorder.AppConstants;\nimport com.dimowner.audiorecorder.R;\nimport com.dimowner.audiorecorder.app.main.MainActivity;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.UUID;\n\nimport timber.log.Timber;\n\npublic class UploadService extends Service {\n\n    public static final String ACTION_START_UPLOAD_SERVICE = \"ACTION_START_UPLOAD_SERVICE\";\n    public static final String ACTION_STOP_UPLOAD_SERVICE = \"ACTION_STOP_UPLOAD_SERVICE\";\n    public static final String EXTRAS_KEY_UPLOAD_PATH = \"key_upload_path\";\n\n    private static final String CHANNEL_ID = \"com.dimowner.audiorecorder.Upload.Notification\";\n    private static final int NOTIFICATION_ID = 104;\n\n    private NotificationManagerCompat notificationManager;\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return null;\n    }\n\n    public static void start(Context context, String filePath) {\n        Intent intent = new Intent(context, UploadService.class);\n        intent.setAction(ACTION_START_UPLOAD_SERVICE);\n        intent.putExtra(EXTRAS_KEY_UPLOAD_PATH, filePath);\n        context.startService(intent);\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        notificationManager = NotificationManagerCompat.from(this);\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            createNotificationChannel();\n        }\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        if (intent != null && ACTION_START_UPLOAD_SERVICE.equals(intent.getAction())) {\n            String path = intent.getStringExtra(EXTRAS_KEY_UPLOAD_PATH);\n            if (path == null || path.isEmpty()) {\n                stopSelf();\n                return START_NOT_STICKY;\n            }\n            startForegroundInternal(buildNotification(getString(R.string.uploading)));\n            ARApplication.getInjector().provideLoadingTasksQueue().postRunnable(() -> doUpload(path));\n        } else if (intent != null && ACTION_STOP_UPLOAD_SERVICE.equals(intent.getAction())) {\n            stopSelf();\n        }\n        return START_NOT_STICKY;\n    }\n\n    private void startForegroundInternal(Notification notification) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n            startForeground(NOTIFICATION_ID, notification, FOREGROUND_SERVICE_TYPE_DATA_SYNC);\n        } else {\n            startForeground(NOTIFICATION_ID, notification);\n        }\n    }\n\n    private Notification buildNotification(String contentText) {\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\n        intent.setFlags(Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);\n        PendingIntent contentPendingIntent = PendingIntent.getActivity(\n                getApplicationContext(), 0, intent, AppConstants.PENDING_INTENT_FLAGS);\n\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(this, CHANNEL_ID)\n                .setWhen(System.currentTimeMillis())\n                .setContentTitle(getString(R.string.app_name))\n                .setContentText(contentText)\n                .setSmallIcon(R.drawable.ic_share)\n                .setOngoing(true)\n                .setOnlyAlertOnce(true)\n                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                .setContentIntent(contentPendingIntent);\n        return builder.build();\n    }\n\n    private void updateNotificationText(String text) {\n        notificationManager.notify(NOTIFICATION_ID, buildNotification(text));\n    }\n\n    private void doUpload(String filePath) {\n        File file = new File(filePath);\n        if (!file.exists()) {\n            Toast.makeText(getApplicationContext(), R.string.upload_failed, Toast.LENGTH_LONG).show();\n            stopSelf();\n            return;\n        }\n        String endpoint = \"https://roscas-minuta.onrender.com/api/upload?provider=assemblyai\";\n        String boundary = UUID.randomUUID().toString();\n        String LINE_FEED = \"\\r\\n\";\n        HttpURLConnection connection = null;\n        try {\n            updateNotificationText(getString(R.string.uploading));\n            URL url = new URL(endpoint);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(\"POST\");\n            connection.setDoInput(true);\n            connection.setDoOutput(true);\n            connection.setUseCaches(false);\n            connection.setConnectTimeout(30000);\n            connection.setReadTimeout(60000);\n            connection.setChunkedStreamingMode(0);\n            connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n            connection.setRequestProperty(\"Accept\", \"application/json\");\n            connection.setRequestProperty(\"Connection\", \"Keep-Alive\");\n\n            DataOutputStream out = new DataOutputStream(connection.getOutputStream());\n\n            // File part\n            String fileName = file.getName();\n            String mimeType = guessAudioMimeType(fileName);\n            out.writeBytes(\"--\" + boundary + LINE_FEED);\n            out.writeBytes(\"Content-Disposition: form-data; name=\\\"audio\\\"; filename=\\\"\" + fileName + \"\\\"\" + LINE_FEED);\n            out.writeBytes(\"Content-Type: \" + mimeType + LINE_FEED);\n            out.writeBytes(LINE_FEED);\n\n            byte[] buffer = new byte[8192];\n            int count;\n            BufferedInputStream inputStream = new BufferedInputStream(new FileInputStream(file));\n            while ((count = inputStream.read(buffer)) != -1) {\n                out.write(buffer, 0, count);\n            }\n            inputStream.close();\n            out.writeBytes(LINE_FEED);\n\n            // End boundary\n            out.writeBytes(\"--\" + boundary + \"--\" + LINE_FEED);\n            out.flush();\n            out.close();\n\n            int responseCode = connection.getResponseCode();\n            String responseBody = readResponseBody(connection);\n            if (responseCode >= 200 && responseCode < 300) {\n                Timber.i(\"Upload success: %s\", responseBody);\n                Toast.makeText(getApplicationContext(), R.string.upload_success, Toast.LENGTH_LONG).show();\n            } else {\n                Timber.e(\"Upload failed: %d, body: %s\", responseCode, responseBody);\n                Toast.makeText(getApplicationContext(), R.string.upload_failed, Toast.LENGTH_LONG).show();\n            }\n        } catch (IOException e) {\n            Timber.e(e);\n            Toast.makeText(getApplicationContext(), R.string.upload_failed, Toast.LENGTH_LONG).show();\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n            stopSelf();\n        }\n    }\n\n    private static String guessAudioMimeType(String fileName) {\n        String lower = fileName.toLowerCase();\n        if (lower.endsWith(\".mp3\")) return \"audio/mpeg\";\n        if (lower.endsWith(\".m4a\")) return \"audio/mp4\";\n        if (lower.endsWith(\".aac\")) return \"audio/aac\";\n        if (lower.endsWith(\".wav\")) return \"audio/wav\";\n        if (lower.endsWith(\".ogg\") || lower.endsWith(\".oga\")) return \"audio/ogg\";\n        if (lower.endsWith(\".3gp\") || lower.endsWith(\".3gpp\")) return \"audio/3gpp\";\n        if (lower.endsWith(\".amr\")) return \"audio/amr\";\n        return \"application/octet-stream\";\n    }\n\n    private static String readResponseBody(HttpURLConnection connection) {\n        InputStream is = null;\n        try {\n            if (connection.getResponseCode() >= 200 && connection.getResponseCode() < 300) {\n                is = connection.getInputStream();\n            } else {\n                is = connection.getErrorStream();\n            }\n            if (is == null) return \"\";\n            BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n            StringBuilder sb = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line).append('\\n');\n            }\n            reader.close();\n            return sb.toString();\n        } catch (IOException e) {\n            Timber.e(e);\n            return \"\";\n        } finally {\n            if (is != null) {\n                try { is.close(); } catch (IOException ignored) {}\n            }\n        }\n    }\n\n    @RequiresApi(api = Build.VERSION_CODES.O)\n    private void createNotificationChannel() {\n        NotificationChannel channel = new NotificationChannel(CHANNEL_ID, \"Default\", NotificationManager.IMPORTANCE_DEFAULT);\n        channel.setLightColor(Color.BLUE);\n        channel.enableVibration(false);\n        channel.setSound(null, null);\n        NotificationManager manager = getSystemService(NotificationManager.class);\n        if (manager != null) {\n            manager.createNotificationChannel(channel);\n        }\n    }\n}\n\n\n","baseTimestamp":1756374740377},"C:/Users/isacataria/Documents/GitHub/AudioRecorder/app/src/main/res/menu/menu_more.xml":{"filePath":"C:/Users/isacataria/Documents/GitHub/AudioRecorder/app/src/main/res/menu/menu_more.xml","baseContent":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t\txmlns:tools=\"http://schemas.android.com/tools\"\n\t\ttools:context=\".activities.PatientSelectionActivity\">\n\n\t<item\n\t\t\tandroid:id=\"@+id/menu_share\"\n\t\t\tandroid:icon=\"@drawable/ic_share\"\n\t\t\tandroid:title=\"@string/share\" />\n\t<item\n\t\t\tandroid:id=\"@+id/menu_info\"\n\t\t\tandroid:icon=\"@drawable/ic_info\"\n\t\t\tandroid:title=\"@string/info\" />\n\t<item\n\t\t\tandroid:id=\"@+id/menu_rename\"\n\t\t\tandroid:icon=\"@drawable/ic_pencil\"\n\t\t\tandroid:title=\"@string/rename\" />\n\t<item\n\t\t\tandroid:id=\"@+id/menu_open_with\"\n\t\t\tandroid:icon=\"@drawable/ic_open_with\"\n\t\t\tandroid:title=\"@string/open_with\" />\n\t<item\n\t\t\tandroid:id=\"@+id/menu_save_as\"\n\t\t\tandroid:icon=\"@drawable/ic_save_alt\"\n\t\t\tandroid:title=\"@string/save_as\" />\n\t<item\n\t\t\tandroid:id=\"@+id/menu_upload\"\n\t\t\tandroid:icon=\"@drawable/baseline_cloud_upload_24\"\n\t\t\tandroid:title=\"@string/upload\" />\n\t<item\n\t\t\tandroid:id=\"@+id/menu_delete\"\n\t\t\tandroid:icon=\"@drawable/ic_delete_forever\"\n\t\t\tandroid:title=\"@string/delete\" />\n\n</menu>\n","baseTimestamp":1756374903904},"C:/Users/isacataria/Documents/GitHub/AudioRecorder/app/build.gradle":{"filePath":"C:/Users/isacataria/Documents/GitHub/AudioRecorder/app/build.gradle","baseContent":"apply plugin: 'com.android.application'\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-parcelize'\napply plugin: 'kotlin-kapt'\n//apply plugin: 'com.google.firebase.crashlytics'\n//apply plugin: 'com.google.gms.google-services'\n\nandroid {\n\tnamespace 'com.dimowner.audiorecorder'\n\tcompileSdkVersion 34\n\tdefaultConfig {\n\t\tapplicationId \"com.dimowner.audiorecorder\"\n\t\tminSdkVersion 23\n\t\ttargetSdkVersion 34\n\t\tversionCode 935\n\t\tversionName \"0.9.99\"\n\t}\n\n\tbuildFeatures {\n\t\tviewBinding true\n\t\tbuildConfig true\n\t}\n\n\tdef keystorePropertiesFile = rootProject.file(\"keystore.properties\")\n\tdef keystoreProperties = new Properties()\n\tkeystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n\n\tsigningConfigs {\n\t\tdev {\n\t\t\tstoreFile file('key/debug/debug.keystore')\n\t\t\tstorePassword 'android'\n\t\t\tkeyAlias 'androiddebugkey'\n\t\t\tkeyPassword 'android'\n\t\t}\n\t\trelease {\n\t\t\tstoreFile file(keystoreProperties['prodStoreFile'])\n\t\t\tstorePassword keystoreProperties['prodStorePassword']\n\t\t\tkeyAlias keystoreProperties['prodKeyAlias']\n\t\t\tkeyPassword keystoreProperties['prodKeyPassword']\n\t\t}\n\t}\n\n\tbuildTypes {\n\t\trelease {\n\t\t\tminifyEnabled true\n\t\t\tshrinkResources true\n\t\t\tproguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n//\t\t\tfirebaseCrashlytics {\n//\t\t\t\tmappingFileUploadEnabled true\n//\t\t\t}\n\t\t}\n\t\tdebug {\n\t\t\tminifyEnabled false\n\t\t}\n\t}\n\n\tflavorDimensions \"default\"\n\n\tproductFlavors {\n\t\tdebugConfig {\n\t\t\tdimension \"default\"\n\t\t\tapplicationId \"com.dimowner.audiorecorder.debug\"\n\t\t\tsigningConfig = signingConfigs.dev\n\t\t}\n\t\treleaseConfig {\n\t\t\tdimension \"default\"\n\t\t\tsigningConfig = signingConfigs.dev\n\t\t\tapplicationId \"com.dimowner.audiorecorder\"\n\t\t}\n\t}\n\n\tcompileOptions {\n\t\tsourceCompatibility = JavaVersion.VERSION_17\n\t\ttargetCompatibility = JavaVersion.VERSION_17\n\t}\n\n\tkotlin {\n\t\tjvmToolchain(17)\n\t}\n\n\ttasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {\n\t\tkotlinOptions {\n\t\t\tjvmTarget = \"17\"\n\t\t}\n\t}\n\n\tlintOptions {\n\t\tabortOnError false\n\t}\n}\n\n// Remove not needed buildVariants.\nandroid.variantFilter { variant ->\n\tif (variant.buildType.name == 'release'\n\t\t\t&& variant.getFlavors().get(0).name == 'debugConfig') {\n\t\tvariant.setIgnore(true)\n\t}\n\tif (variant.buildType.name == 'debug'\n\t\t\t&& variant.getFlavors().get(0).name == 'releaseConfig') {\n\t\tvariant.setIgnore(true)\n\t}\n}\n\ndependencies {\n\tdef androidX = \"1.3.2\"\n\tdef coroutines = \"1.8.0\"\n\tdef timber = \"5.0.1\"\n\tdef okhttp = \"4.12.0\"\n\n\t//Kotlin\n\timplementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n\timplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines\"\n\timplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines\"\n\n\t//Timber\n\timplementation \"com.jakewharton.timber:timber:$timber\"\n\timplementation \"androidx.recyclerview:recyclerview:$androidX\"\n\n\t// OkHttp for networking\n\timplementation \"com.squareup.okhttp3:okhttp:$okhttp\"\n\n\ttestImplementation(\"junit:junit:4.13.2\")\n\ttestImplementation(\"io.mockk:mockk:1.13.10\")\n\n//\t// Import the BoM for the Firebase platform\n//\timplementation platform('com.google.firebase:firebase-bom:26.1.0')\n//\t// Declare the dependencies for the Crashlytics and Analytics libraries\n//\t// When using the BoM, you don't specify versions in Firebase library dependencies\n//\timplementation 'com.google.firebase:firebase-crashlytics'\n//\timplementation 'com.google.firebase:firebase-analytics'\n}\n","baseTimestamp":1756374920726},"C:/Users/isacataria/Documents/GitHub/AudioRecorder/app/src/main/java/com/dimowner/audiorecorder/app/UploadService.kt":{"filePath":"C:/Users/isacataria/Documents/GitHub/AudioRecorder/app/src/main/java/com/dimowner/audiorecorder/app/UploadService.kt","baseContent":"package com.dimowner.audiorecorder.app\n\nimport android.app.Notification\nimport android.app.NotificationChannel\nimport android.app.NotificationManager\nimport android.app.PendingIntent\nimport android.app.Service\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Build\nimport android.os.IBinder\nimport androidx.core.app.NotificationCompat\nimport androidx.core.app.NotificationManagerCompat\nimport com.dimowner.audiorecorder.ARApplication\nimport com.dimowner.audiorecorder.AppConstants\nimport com.dimowner.audiorecorder.R\nimport com.dimowner.audiorecorder.app.main.MainActivity\nimport okhttp3.MediaType.Companion.toMediaType\nimport okhttp3.MultipartBody\nimport okhttp3.OkHttpClient\nimport okhttp3.Request\nimport okhttp3.RequestBody.Companion.asRequestBody\nimport timber.log.Timber\nimport java.io.File\nimport java.util.concurrent.TimeUnit\n\nclass UploadService : Service() {\n\n    companion object {\n        const val ACTION_START_UPLOAD_SERVICE = \"ACTION_START_UPLOAD_SERVICE\"\n        const val ACTION_STOP_UPLOAD_SERVICE = \"ACTION_STOP_UPLOAD_SERVICE\"\n        const val EXTRAS_KEY_UPLOAD_PATH = \"key_upload_path\"\n\n        private const val CHANNEL_ID = \"com.dimowner.audiorecorder.Upload.Notification\"\n        private const val NOTIF_ID = 105\n\n        @JvmStatic\n        fun start(context: Context, filePath: String) {\n            val intent = Intent(context, UploadService::class.java)\n            intent.action = ACTION_START_UPLOAD_SERVICE\n            intent.putExtra(EXTRAS_KEY_UPLOAD_PATH, filePath)\n            context.startService(intent)\n        }\n    }\n\n    private lateinit var notificationManager: NotificationManagerCompat\n\n    override fun onBind(intent: Intent?): IBinder? = null\n\n    override fun onCreate() {\n        super.onCreate()\n        notificationManager = NotificationManagerCompat.from(this)\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            val channel = NotificationChannel(CHANNEL_ID, \"Default\", NotificationManager.IMPORTANCE_DEFAULT)\n            channel.setSound(null, null)\n            channel.enableVibration(false)\n            val nm = getSystemService(NotificationManager::class.java)\n            nm?.createNotificationChannel(channel)\n        }\n    }\n\n    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n        if (intent != null && ACTION_START_UPLOAD_SERVICE == intent.action) {\n            val path = intent.getStringExtra(EXTRAS_KEY_UPLOAD_PATH)\n            if (path.isNullOrEmpty()) {\n                stopSelf()\n                return START_NOT_STICKY\n            }\n            startForegroundCompat(buildNotification(getString(R.string.uploading)))\n            ARApplication.injector.provideLoadingTasksQueue().postRunnable {\n                doUpload(path)\n            }\n        } else if (intent != null && ACTION_STOP_UPLOAD_SERVICE == intent.action) {\n            stopSelf()\n        }\n        return START_NOT_STICKY\n    }\n\n    private fun startForegroundCompat(notification: Notification) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n            startForeground(NOTIF_ID, notification, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_DATA_SYNC)\n        } else {\n            startForeground(NOTIF_ID, notification)\n        }\n    }\n\n    private fun buildNotification(text: String): Notification {\n        val intent = Intent(applicationContext, MainActivity::class.java)\n        intent.flags = Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP\n        val contentPendingIntent = PendingIntent.getActivity(applicationContext, 0, intent, AppConstants.PENDING_INTENT_FLAGS)\n        return NotificationCompat.Builder(this, CHANNEL_ID)\n            .setWhen(System.currentTimeMillis())\n            .setContentTitle(getString(R.string.app_name))\n            .setContentText(text)\n            .setSmallIcon(R.drawable.ic_share)\n            .setOngoing(true)\n            .setOnlyAlertOnce(true)\n            .setContentIntent(contentPendingIntent)\n            .build()\n    }\n\n    private fun updateNotificationText(text: String) {\n        notificationManager.notify(NOTIF_ID, buildNotification(text))\n    }\n\n    private fun doUpload(filePath: String) {\n        val file = File(filePath)\n        if (!file.exists()) {\n            stopSelf()\n            return\n        }\n        try {\n            updateNotificationText(getString(R.string.uploading))\n\n            val client = OkHttpClient.Builder()\n                .connectTimeout(30, TimeUnit.SECONDS)\n                .readTimeout(60, TimeUnit.SECONDS)\n                .callTimeout(60, TimeUnit.SECONDS)\n                .retryOnConnectionFailure(true)\n                .build()\n\n            val mediaType = guessAudioMimeType(file.name).toMediaType()\n            val body = MultipartBody.Builder()\n                .setType(MultipartBody.FORM)\n                .addFormDataPart(\"audio\", file.name, file.asRequestBody(mediaType))\n                .build()\n\n            val request = Request.Builder()\n                .url(\"https://roscas-minuta.onrender.com/api/upload?provider=assemblyai\")\n                .post(body)\n                .addHeader(\"Accept\", \"application/json\")\n                .build()\n\n            client.newCall(request).execute().use { response ->\n                val code = response.code\n                val bodyStr = response.body?.string() ?: \"\"\n                if (code in 200..299) {\n                    Timber.i(\"Upload success: %s\", bodyStr)\n                } else {\n                    Timber.e(\"Upload failed: %d, body: %s\", code, bodyStr)\n                }\n            }\n        } catch (t: Throwable) {\n            Timber.e(t)\n        } finally {\n            stopSelf()\n        }\n    }\n\n    private fun guessAudioMimeType(name: String): String {\n        val lower = name.lowercase()\n        return when {\n            lower.endsWith(\".mp3\") -> \"audio/mpeg\"\n            lower.endsWith(\".m4a\") -> \"audio/mp4\"\n            lower.endsWith(\".aac\") -> \"audio/aac\"\n            lower.endsWith(\".wav\") -> \"audio/wav\"\n            lower.endsWith(\".ogg\") || lower.endsWith(\".oga\") -> \"audio/ogg\"\n            lower.endsWith(\".3gp\") || lower.endsWith(\".3gpp\") -> \"audio/3gpp\"\n            lower.endsWith(\".amr\") -> \"audio/amr\"\n            else -> \"application/octet-stream\"\n        }\n    }\n}\n\n\n","baseTimestamp":1756375367337,"deltas":[{"timestamp":1756375698746,"changes":[{"type":"INSERT","lineNumber":17,"content":"import okhttp3.MediaType"},{"type":"INSERT","lineNumber":22,"content":"import okhttp3.RequestBody"},{"type":"DELETE","lineNumber":68,"oldContent":"            startForegroundCompat(buildNotification(getString(R.string.uploading)))"},{"type":"INSERT","lineNumber":70,"content":"            startForegroundCompat(buildNotification(getString(R.string.uploading_with_name, File(path).name)))"},{"type":"INSERT","lineNumber":110,"content":"            notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"INSERT","lineNumber":125,"content":"            val progressBody = ProgressRequestBody(file, mediaType) { percent ->"},{"type":"INSERT","lineNumber":126,"content":"                // Update notification every ~200ms via percent threshold could be added; keep simple for now"},{"type":"INSERT","lineNumber":127,"content":"                notificationManager.notify(NOTIF_ID, buildNotification(\"${getString(R.string.uploading_with_name, file.name)}  $percent%\"))"},{"type":"INSERT","lineNumber":128,"content":"            }"},{"type":"DELETE","lineNumber":124,"oldContent":"                .addFormDataPart(\"audio\", file.name, file.asRequestBody(mediaType))"},{"type":"INSERT","lineNumber":131,"content":"                .addFormDataPart(\"audio\", file.name, progressBody)"},{"type":"INSERT","lineNumber":145,"content":"                    notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_success)))"},{"type":"INSERT","lineNumber":148,"content":"                    notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"INSERT","lineNumber":153,"content":"            notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"INSERT","lineNumber":174,"content":"private class ProgressRequestBody("},{"type":"INSERT","lineNumber":175,"content":"    private val file: File,"},{"type":"INSERT","lineNumber":176,"content":"    private val contentType: MediaType,"},{"type":"INSERT","lineNumber":177,"content":"    private val onProgress: (Int) -> Unit"},{"type":"INSERT","lineNumber":178,"content":") : RequestBody() {"},{"type":"INSERT","lineNumber":180,"content":"    override fun contentType(): MediaType = contentType"},{"type":"INSERT","lineNumber":182,"content":"    override fun contentLength(): Long = file.length()"},{"type":"INSERT","lineNumber":183,"content":""},{"type":"INSERT","lineNumber":184,"content":"    override fun writeTo(sink: okio.BufferedSink) {"},{"type":"INSERT","lineNumber":185,"content":"        val length = contentLength()"},{"type":"INSERT","lineNumber":186,"content":"        val buffer = ByteArray(DEFAULT_BUFFER_SIZE)"},{"type":"INSERT","lineNumber":187,"content":"        file.inputStream().use { input ->"},{"type":"INSERT","lineNumber":188,"content":"            var uploaded = 0L"},{"type":"INSERT","lineNumber":189,"content":"            var read: Int"},{"type":"INSERT","lineNumber":190,"content":"            var lastEmit = 0"},{"type":"INSERT","lineNumber":191,"content":"            while (input.read(buffer).also { read = it } != -1) {"},{"type":"INSERT","lineNumber":192,"content":"                sink.write(buffer, 0, read)"},{"type":"INSERT","lineNumber":193,"content":"                uploaded += read"},{"type":"INSERT","lineNumber":194,"content":"                val percent = if (length > 0L) ((uploaded * 100) / length).toInt() else 0"},{"type":"INSERT","lineNumber":195,"content":"                if (percent != lastEmit) {"},{"type":"INSERT","lineNumber":196,"content":"                    lastEmit = percent"},{"type":"INSERT","lineNumber":197,"content":"                    onProgress(percent)"},{"type":"INSERT","lineNumber":198,"content":"                }"},{"type":"INSERT","lineNumber":199,"content":"            }"},{"type":"INSERT","lineNumber":200,"content":"        }"},{"type":"INSERT","lineNumber":201,"content":"    }"},{"type":"INSERT","lineNumber":202,"content":""},{"type":"INSERT","lineNumber":203,"content":"    companion object {"},{"type":"INSERT","lineNumber":204,"content":"        private const val DEFAULT_BUFFER_SIZE = 8 * 1024"},{"type":"INSERT","lineNumber":205,"content":"    }"},{"type":"INSERT","lineNumber":206,"content":"}"},{"type":"INSERT","lineNumber":207,"content":""},{"type":"INSERT","lineNumber":208,"content":""},{"type":"INSERT","lineNumber":209,"content":""}]},{"timestamp":1756375743802,"changes":[{"type":"INSERT","lineNumber":11,"content":"import android.os.Handler"},{"type":"INSERT","lineNumber":12,"content":"import android.os.Looper"},{"type":"DELETE","lineNumber":22,"oldContent":"import okhttp3.RequestBody.Companion.asRequestBody"},{"type":"INSERT","lineNumber":25,"content":"import okhttp3.RequestBody.Companion.asRequestBody"},{"type":"DELETE","lineNumber":70,"oldContent":"            ARApplication.injector.provideLoadingTasksQueue().postRunnable {"},{"type":"INSERT","lineNumber":73,"content":"            showToast(getString(R.string.uploading_with_name, File(path).name))"},{"type":"INSERT","lineNumber":74,"content":"            ARApplication.injector.provideLoadingTasksQueue().postRunnable {"},{"type":"INSERT","lineNumber":113,"content":"            notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"DELETE","lineNumber":112,"oldContent":"            notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"INSERT","lineNumber":128,"content":"            val progressBody = ProgressRequestBody(file, mediaType) { percent ->"},{"type":"INSERT","lineNumber":129,"content":"                // Update notification every ~200ms via percent threshold could be added; keep simple for now"},{"type":"INSERT","lineNumber":130,"content":"                notificationManager.notify(NOTIF_ID, buildNotification(\"${getString(R.string.uploading_with_name, file.name)}  $percent%\"))"},{"type":"INSERT","lineNumber":131,"content":"            }"},{"type":"DELETE","lineNumber":127,"oldContent":"            val progressBody = ProgressRequestBody(file, mediaType) { percent ->"},{"type":"INSERT","lineNumber":134,"content":"                .addFormDataPart(\"audio\", file.name, progressBody)"},{"type":"DELETE","lineNumber":129,"oldContent":"                // Update notification every ~200ms via percent threshold could be added; keep simple for now"},{"type":"DELETE","lineNumber":131,"oldContent":"                notificationManager.notify(NOTIF_ID, buildNotification(\"${getString(R.string.uploading_with_name, file.name)}  $percent%\"))"},{"type":"DELETE","lineNumber":133,"oldContent":"            }"},{"type":"DELETE","lineNumber":137,"oldContent":"                .addFormDataPart(\"audio\", file.name, progressBody)"},{"type":"INSERT","lineNumber":148,"content":"                    notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_success)))"},{"type":"INSERT","lineNumber":149,"content":"                    showToast(getString(R.string.upload_success))"},{"type":"INSERT","lineNumber":152,"content":"                    notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"INSERT","lineNumber":153,"content":"                    showToast(getString(R.string.upload_failed))"},{"type":"INSERT","lineNumber":158,"content":"            notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"INSERT","lineNumber":159,"content":"            showToast(getString(R.string.upload_failed))"},{"type":"DELETE","lineNumber":152,"oldContent":"                    notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_success)))"},{"type":"DELETE","lineNumber":156,"oldContent":"                    notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"DELETE","lineNumber":162,"oldContent":"            notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"DELETE","lineNumber":174,"oldContent":""},{"type":"DELETE","lineNumber":175,"oldContent":""},{"type":"DELETE","lineNumber":176,"oldContent":""},{"type":"DELETE","lineNumber":177,"oldContent":""},{"type":"DELETE","lineNumber":178,"oldContent":""},{"type":"DELETE","lineNumber":179,"oldContent":"}"},{"type":"DELETE","lineNumber":180,"oldContent":"    }"},{"type":"DELETE","lineNumber":181,"oldContent":"        private const val DEFAULT_BUFFER_SIZE = 8 * 1024"},{"type":"DELETE","lineNumber":182,"oldContent":"    companion object {"},{"type":"DELETE","lineNumber":183,"oldContent":""},{"type":"DELETE","lineNumber":185,"oldContent":"    }"},{"type":"DELETE","lineNumber":187,"oldContent":"        }"},{"type":"DELETE","lineNumber":189,"oldContent":"            }"},{"type":"DELETE","lineNumber":191,"oldContent":"                }"},{"type":"DELETE","lineNumber":193,"oldContent":"                    onProgress(percent)"},{"type":"DELETE","lineNumber":194,"oldContent":"                    lastEmit = percent"},{"type":"INSERT","lineNumber":185,"content":""},{"type":"DELETE","lineNumber":196,"oldContent":"                if (percent != lastEmit) {"},{"type":"DELETE","lineNumber":197,"oldContent":"                val percent = if (length > 0L) ((uploaded * 100) / length).toInt() else 0"},{"type":"INSERT","lineNumber":187,"content":""},{"type":"DELETE","lineNumber":199,"oldContent":"                uploaded += read"},{"type":"DELETE","lineNumber":201,"oldContent":"                sink.write(buffer, 0, read)"},{"type":"DELETE","lineNumber":203,"oldContent":"            while (input.read(buffer).also { read = it } != -1) {"},{"type":"DELETE","lineNumber":205,"oldContent":"            var lastEmit = 0"},{"type":"DELETE","lineNumber":207,"oldContent":"            var read: Int"},{"type":"INSERT","lineNumber":195,"content":"            var read: Int"},{"type":"INSERT","lineNumber":196,"content":"            var lastEmit = 0"},{"type":"INSERT","lineNumber":197,"content":"            while (input.read(buffer).also { read = it } != -1) {"},{"type":"INSERT","lineNumber":198,"content":"                sink.write(buffer, 0, read)"},{"type":"INSERT","lineNumber":199,"content":"                uploaded += read"},{"type":"INSERT","lineNumber":200,"content":"                val percent = if (length > 0L) ((uploaded * 100) / length).toInt() else 0"},{"type":"INSERT","lineNumber":201,"content":"                if (percent != lastEmit) {"},{"type":"INSERT","lineNumber":202,"content":"                    lastEmit = percent"},{"type":"INSERT","lineNumber":203,"content":"                    onProgress(percent)"},{"type":"INSERT","lineNumber":204,"content":"                }"},{"type":"INSERT","lineNumber":205,"content":"            }"},{"type":"INSERT","lineNumber":206,"content":"        }"},{"type":"INSERT","lineNumber":207,"content":"    }"},{"type":"INSERT","lineNumber":208,"content":""},{"type":"INSERT","lineNumber":209,"content":"    companion object {"},{"type":"INSERT","lineNumber":210,"content":"        private const val DEFAULT_BUFFER_SIZE = 8 * 1024"},{"type":"INSERT","lineNumber":211,"content":"    }"},{"type":"INSERT","lineNumber":212,"content":"}"},{"type":"INSERT","lineNumber":213,"content":""},{"type":"INSERT","lineNumber":214,"content":"private fun showToast(message: String) {"},{"type":"INSERT","lineNumber":215,"content":"    Handler(Looper.getMainLooper()).post {"},{"type":"INSERT","lineNumber":216,"content":"        android.widget.Toast.makeText(ARApplication.getAppContext(), message, android.widget.Toast.LENGTH_LONG).show()"},{"type":"INSERT","lineNumber":217,"content":"    }"},{"type":"INSERT","lineNumber":218,"content":"}"},{"type":"INSERT","lineNumber":219,"content":""},{"type":"INSERT","lineNumber":220,"content":""},{"type":"INSERT","lineNumber":221,"content":""}]},{"timestamp":1756375758842,"changes":[{"type":"MODIFY","lineNumber":13,"content":"import androidx.core.app.NotificationCompat","oldContent":"import androidx.core.app.NotificationCompat"},{"type":"MODIFY","lineNumber":26,"content":"import timber.log.Timber","oldContent":"import timber.log.Timber"},{"type":"DELETE","lineNumber":73,"oldContent":"                doUpload(path)"},{"type":"MODIFY","lineNumber":75,"content":"                doUpload(path)","oldContent":"            }"},{"type":"INSERT","lineNumber":76,"content":"            }"},{"type":"INSERT","lineNumber":113,"content":"            notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"DELETE","lineNumber":115,"oldContent":"            notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"DELETE","lineNumber":128,"oldContent":"            val body = MultipartBody.Builder()"},{"type":"DELETE","lineNumber":129,"oldContent":"                .setType(MultipartBody.FORM)"},{"type":"DELETE","lineNumber":131,"oldContent":"                .build()"},{"type":"DELETE","lineNumber":134,"oldContent":""},{"type":"DELETE","lineNumber":136,"oldContent":"            val request = Request.Builder()"},{"type":"INSERT","lineNumber":132,"content":"            val body = MultipartBody.Builder()"},{"type":"INSERT","lineNumber":133,"content":"                .setType(MultipartBody.FORM)"},{"type":"INSERT","lineNumber":135,"content":"                .build()"},{"type":"INSERT","lineNumber":136,"content":""},{"type":"INSERT","lineNumber":137,"content":"            val request = Request.Builder()"},{"type":"INSERT","lineNumber":148,"content":"                    notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_success)))"},{"type":"INSERT","lineNumber":149,"content":"                    showToast(getString(R.string.upload_success))"},{"type":"INSERT","lineNumber":152,"content":"                    notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"INSERT","lineNumber":153,"content":"                    showToast(getString(R.string.upload_failed))"},{"type":"DELETE","lineNumber":151,"oldContent":"                    notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_success)))"},{"type":"DELETE","lineNumber":153,"oldContent":"                    showToast(getString(R.string.upload_success))"},{"type":"INSERT","lineNumber":158,"content":"            notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"INSERT","lineNumber":159,"content":"            showToast(getString(R.string.upload_failed))"},{"type":"DELETE","lineNumber":157,"oldContent":"                    notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"DELETE","lineNumber":158,"oldContent":"                    showToast(getString(R.string.upload_failed))"},{"type":"DELETE","lineNumber":163,"oldContent":"            notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"DELETE","lineNumber":165,"oldContent":"            showToast(getString(R.string.upload_failed))"},{"type":"DELETE","lineNumber":181,"oldContent":""},{"type":"DELETE","lineNumber":183,"oldContent":""},{"type":"DELETE","lineNumber":187,"oldContent":"            var read: Int"},{"type":"INSERT","lineNumber":185,"content":""},{"type":"INSERT","lineNumber":187,"content":""},{"type":"INSERT","lineNumber":188,"content":"    override fun contentLength(): Long = file.length()"},{"type":"INSERT","lineNumber":189,"content":""},{"type":"INSERT","lineNumber":190,"content":"    override fun writeTo(sink: okio.BufferedSink) {"},{"type":"INSERT","lineNumber":191,"content":"        val length = contentLength()"},{"type":"INSERT","lineNumber":192,"content":"        val buffer = ByteArray(DEFAULT_BUFFER_SIZE)"},{"type":"INSERT","lineNumber":193,"content":"        file.inputStream().use { input ->"},{"type":"INSERT","lineNumber":194,"content":"            var uploaded = 0L"},{"type":"INSERT","lineNumber":195,"content":"            var read: Int"},{"type":"DELETE","lineNumber":192,"oldContent":"    override fun contentLength(): Long = file.length()"},{"type":"DELETE","lineNumber":195,"oldContent":""},{"type":"DELETE","lineNumber":198,"oldContent":"    override fun writeTo(sink: okio.BufferedSink) {"},{"type":"DELETE","lineNumber":201,"oldContent":"        val length = contentLength()"},{"type":"DELETE","lineNumber":204,"oldContent":"        val buffer = ByteArray(DEFAULT_BUFFER_SIZE)"},{"type":"DELETE","lineNumber":207,"oldContent":"        file.inputStream().use { input ->"},{"type":"DELETE","lineNumber":209,"oldContent":"            var uploaded = 0L"},{"type":"DELETE","lineNumber":211,"oldContent":""},{"type":"DELETE","lineNumber":213,"oldContent":""},{"type":"DELETE","lineNumber":216,"oldContent":""},{"type":"DELETE","lineNumber":217,"oldContent":"}"},{"type":"DELETE","lineNumber":219,"oldContent":"    }"},{"type":"INSERT","lineNumber":217,"content":"    }"},{"type":"INSERT","lineNumber":218,"content":"}"},{"type":"INSERT","lineNumber":219,"content":""},{"type":"INSERT","lineNumber":220,"content":""},{"type":"INSERT","lineNumber":221,"content":""}]},{"timestamp":1756375807566,"changes":[{"type":"INSERT","lineNumber":12,"content":"import android.os.Looper"},{"type":"DELETE","lineNumber":13,"oldContent":"import androidx.core.app.NotificationCompat"},{"type":"INSERT","lineNumber":25,"content":"import okhttp3.RequestBody.Companion.asRequestBody"},{"type":"DELETE","lineNumber":26,"oldContent":"import timber.log.Timber"},{"type":"INSERT","lineNumber":74,"content":"            ARApplication.injector.provideLoadingTasksQueue().postRunnable {"},{"type":"DELETE","lineNumber":76,"oldContent":"            ARApplication.injector.provideLoadingTasksQueue().postRunnable {"},{"type":"DELETE","lineNumber":129,"oldContent":"            val body = MultipartBody.Builder()"},{"type":"DELETE","lineNumber":131,"oldContent":"                .setType(MultipartBody.FORM)"},{"type":"DELETE","lineNumber":133,"oldContent":"                .build()"},{"type":"INSERT","lineNumber":132,"content":"            val body = MultipartBody.Builder()"},{"type":"INSERT","lineNumber":133,"content":"                .setType(MultipartBody.FORM)"},{"type":"INSERT","lineNumber":134,"content":"                .addFormDataPart(\"audio\", file.name, progressBody)"},{"type":"INSERT","lineNumber":135,"content":"                .build()"},{"type":"DELETE","lineNumber":137,"oldContent":"                .addFormDataPart(\"audio\", file.name, progressBody)"},{"type":"MODIFY","lineNumber":150,"content":"                } else {","oldContent":"                } else {"},{"type":"DELETE","lineNumber":152,"oldContent":"                }"},{"type":"INSERT","lineNumber":153,"content":"                    val snippet = if (bodyStr.length > 200) bodyStr.substring(0, 200) + \"…\" else bodyStr"},{"type":"INSERT","lineNumber":154,"content":"                    showToast(getString(R.string.upload_failed) + \": \" + snippet)"},{"type":"INSERT","lineNumber":155,"content":"                }"},{"type":"DELETE","lineNumber":155,"oldContent":"                    showToast(getString(R.string.upload_failed))"},{"type":"DELETE","lineNumber":158,"oldContent":"        } finally {"},{"type":"MODIFY","lineNumber":160,"content":"            showToast(getString(R.string.upload_failed) + \": \" + (t.message ?: \"\"))","oldContent":"            showToast(getString(R.string.upload_failed))"},{"type":"INSERT","lineNumber":161,"content":"        } finally {"},{"type":"INSERT","lineNumber":166,"content":"    private fun showToast(message: String) {"},{"type":"INSERT","lineNumber":167,"content":"        Handler(Looper.getMainLooper()).post {"},{"type":"INSERT","lineNumber":168,"content":"            android.widget.Toast.makeText(applicationContext, message, android.widget.Toast.LENGTH_LONG).show()"},{"type":"INSERT","lineNumber":169,"content":"        }"},{"type":"INSERT","lineNumber":170,"content":"    }"},{"type":"INSERT","lineNumber":171,"content":""},{"type":"DELETE","lineNumber":183,"oldContent":""},{"type":"DELETE","lineNumber":187,"oldContent":"    override fun contentLength(): Long = file.length()"},{"type":"DELETE","lineNumber":190,"oldContent":"            var lastEmit = 0"},{"type":"INSERT","lineNumber":195,"content":"    override fun contentLength(): Long = file.length()"},{"type":"INSERT","lineNumber":196,"content":""},{"type":"DELETE","lineNumber":192,"oldContent":"            while (input.read(buffer).also { read = it } != -1) {"},{"type":"DELETE","lineNumber":194,"oldContent":"                sink.write(buffer, 0, read)"},{"type":"DELETE","lineNumber":197,"oldContent":"                uploaded += read"},{"type":"DELETE","lineNumber":199,"oldContent":"                val percent = if (length > 0L) ((uploaded * 100) / length).toInt() else 0"},{"type":"INSERT","lineNumber":203,"content":"            var lastEmit = 0"},{"type":"INSERT","lineNumber":204,"content":"            while (input.read(buffer).also { read = it } != -1) {"},{"type":"INSERT","lineNumber":205,"content":"                sink.write(buffer, 0, read)"},{"type":"INSERT","lineNumber":206,"content":"                uploaded += read"},{"type":"INSERT","lineNumber":207,"content":"                val percent = if (length > 0L) ((uploaded * 100) / length).toInt() else 0"},{"type":"INSERT","lineNumber":221,"content":"private fun showToast(message: String) {"},{"type":"INSERT","lineNumber":222,"content":"    Handler(Looper.getMainLooper()).post {"},{"type":"INSERT","lineNumber":223,"content":"        android.widget.Toast.makeText(ARApplication.getAppContext(), message, android.widget.Toast.LENGTH_LONG).show()"},{"type":"DELETE","lineNumber":216,"oldContent":"private fun showToast(message: String) {"},{"type":"DELETE","lineNumber":219,"oldContent":"    Handler(Looper.getMainLooper()).post {"},{"type":"DELETE","lineNumber":221,"oldContent":"        android.widget.Toast.makeText(ARApplication.getAppContext(), message, android.widget.Toast.LENGTH_LONG).show()"}]},{"timestamp":1756375913003,"changes":[{"type":"DELETE","lineNumber":130,"oldContent":"            val body = MultipartBody.Builder()"},{"type":"INSERT","lineNumber":131,"content":"            }"},{"type":"INSERT","lineNumber":132,"content":"            val body = MultipartBody.Builder()"},{"type":"DELETE","lineNumber":134,"oldContent":"            }"},{"type":"INSERT","lineNumber":149,"content":"                    showToast(getString(R.string.upload_success))"},{"type":"DELETE","lineNumber":150,"oldContent":"                } else {"},{"type":"MODIFY","lineNumber":153,"content":"                    val snippet = if (bodyStr.length > 200) bodyStr.substring(0, 200) + \"…\" else bodyStr","oldContent":"                    val snippet = if (bodyStr.length > 200) bodyStr.substring(0, 200) + \"…\" else bodyStr"},{"type":"MODIFY","lineNumber":156,"content":"            }","oldContent":"            }"},{"type":"DELETE","lineNumber":166,"oldContent":"    private fun guessAudioMimeType(name: String): String {"},{"type":"DELETE","lineNumber":168,"oldContent":"        val lower = name.lowercase()"},{"type":"DELETE","lineNumber":170,"oldContent":"        return when {"},{"type":"DELETE","lineNumber":172,"oldContent":"            lower.endsWith(\".mp3\") -> \"audio/mpeg\""},{"type":"DELETE","lineNumber":174,"oldContent":"            lower.endsWith(\".m4a\") -> \"audio/mp4\""},{"type":"DELETE","lineNumber":176,"oldContent":"            lower.endsWith(\".aac\") -> \"audio/aac\""},{"type":"INSERT","lineNumber":172,"content":"    private fun guessAudioMimeType(name: String): String {"},{"type":"INSERT","lineNumber":173,"content":"        val lower = name.lowercase()"},{"type":"INSERT","lineNumber":174,"content":"        return when {"},{"type":"INSERT","lineNumber":175,"content":"            lower.endsWith(\".mp3\") -> \"audio/mpeg\""},{"type":"INSERT","lineNumber":176,"content":"            lower.endsWith(\".m4a\") -> \"audio/mp4\""},{"type":"INSERT","lineNumber":177,"content":"            lower.endsWith(\".aac\") -> \"audio/aac\""},{"type":"INSERT","lineNumber":195,"content":"    override fun contentLength(): Long = file.length()"},{"type":"INSERT","lineNumber":196,"content":""},{"type":"DELETE","lineNumber":197,"oldContent":"    override fun contentLength(): Long = file.length()"},{"type":"DELETE","lineNumber":199,"oldContent":""},{"type":"INSERT","lineNumber":203,"content":"            var lastEmit = 0"},{"type":"INSERT","lineNumber":204,"content":"            while (input.read(buffer).also { read = it } != -1) {"},{"type":"INSERT","lineNumber":205,"content":"                sink.write(buffer, 0, read)"},{"type":"INSERT","lineNumber":206,"content":"                uploaded += read"},{"type":"INSERT","lineNumber":207,"content":"                val percent = if (length > 0L) ((uploaded * 100) / length).toInt() else 0"},{"type":"DELETE","lineNumber":205,"oldContent":"            var lastEmit = 0"},{"type":"DELETE","lineNumber":207,"oldContent":"            while (input.read(buffer).also { read = it } != -1) {"},{"type":"DELETE","lineNumber":209,"oldContent":"                sink.write(buffer, 0, read)"},{"type":"DELETE","lineNumber":211,"oldContent":"                uploaded += read"},{"type":"DELETE","lineNumber":213,"oldContent":"                val percent = if (length > 0L) ((uploaded * 100) / length).toInt() else 0"},{"type":"DELETE","lineNumber":221,"oldContent":"    }"},{"type":"DELETE","lineNumber":222,"oldContent":"}"},{"type":"DELETE","lineNumber":226,"oldContent":"private fun showToast(message: String) {"},{"type":"DELETE","lineNumber":227,"oldContent":"    Handler(Looper.getMainLooper()).post {"},{"type":"DELETE","lineNumber":228,"oldContent":"        android.widget.Toast.makeText(ARApplication.getAppContext(), message, android.widget.Toast.LENGTH_LONG).show()"},{"type":"INSERT","lineNumber":224,"content":""}]},{"timestamp":1756376067965,"changes":[{"type":"INSERT","lineNumber":50,"content":"    private var lastProgressEmitMs: Long = 0"},{"type":"INSERT","lineNumber":51,"content":"    private var lastProgressPercent: Int = -1"},{"type":"DELETE","lineNumber":129,"oldContent":"                // Update notification every ~200ms via percent threshold could be added; keep simple for now"},{"type":"INSERT","lineNumber":131,"content":"                updateProgress(file.name, percent)"},{"type":"DELETE","lineNumber":131,"oldContent":"                notificationManager.notify(NOTIF_ID, buildNotification(\"${getString(R.string.uploading_with_name, file.name)}  $percent%\"))"},{"type":"INSERT","lineNumber":153,"content":"                    notificationManager.notify(NOTIF_ID, buildNotification(getString(R.string.upload_failed)))"},{"type":"DELETE","lineNumber":153,"oldContent":"                    val snippet = if (bodyStr.length > 200) bodyStr.substring(0, 200) + \"…\" else bodyStr"},{"type":"INSERT","lineNumber":156,"content":"                }"},{"type":"DELETE","lineNumber":156,"oldContent":"            }"},{"type":"INSERT","lineNumber":163,"content":"            // Clear foreground and stop"},{"type":"INSERT","lineNumber":164,"content":"            if (Build.VERSION.SDK_INT > Build.VERSION_CODES.S_V2) {"},{"type":"INSERT","lineNumber":165,"content":"                stopForeground(STOP_FOREGROUND_REMOVE)"},{"type":"INSERT","lineNumber":166,"content":"            } else {"},{"type":"INSERT","lineNumber":167,"content":"                @Suppress(\"DEPRECATION\")"},{"type":"INSERT","lineNumber":168,"content":"                stopForeground(true)"},{"type":"INSERT","lineNumber":169,"content":"            }"},{"type":"INSERT","lineNumber":174,"content":"    private fun updateProgress(fileName: String, percent: Int) {"},{"type":"INSERT","lineNumber":175,"content":"        val now = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":176,"content":"        val shouldEmit = (percent == 100) ||"},{"type":"INSERT","lineNumber":177,"content":"                (percent - lastProgressPercent >= 5) ||"},{"type":"INSERT","lineNumber":178,"content":"                (now - lastProgressEmitMs >= 750)"},{"type":"INSERT","lineNumber":179,"content":"        if (!shouldEmit) return"},{"type":"INSERT","lineNumber":180,"content":"        lastProgressPercent = percent"},{"type":"INSERT","lineNumber":181,"content":"        lastProgressEmitMs = now"},{"type":"INSERT","lineNumber":182,"content":"        notificationManager.notify("},{"type":"INSERT","lineNumber":183,"content":"            NOTIF_ID,"},{"type":"INSERT","lineNumber":184,"content":"            buildNotification(\"${getString(R.string.uploading_with_name, fileName)}  $percent%\")"},{"type":"INSERT","lineNumber":185,"content":"        )"},{"type":"INSERT","lineNumber":186,"content":"    }"},{"type":"INSERT","lineNumber":187,"content":""},{"type":"INSERT","lineNumber":191,"content":"        }"},{"type":"INSERT","lineNumber":192,"content":"    }"},{"type":"INSERT","lineNumber":193,"content":""},{"type":"DELETE","lineNumber":171,"oldContent":"        }"},{"type":"DELETE","lineNumber":174,"oldContent":"    }"},{"type":"DELETE","lineNumber":177,"oldContent":""},{"type":"DELETE","lineNumber":196,"oldContent":"    override fun writeTo(sink: okio.BufferedSink) {"},{"type":"INSERT","lineNumber":219,"content":"    override fun writeTo(sink: okio.BufferedSink) {"},{"type":"DELETE","lineNumber":204,"oldContent":"                if (percent != lastEmit) {"},{"type":"DELETE","lineNumber":206,"oldContent":"                    lastEmit = percent"},{"type":"DELETE","lineNumber":209,"oldContent":"                    onProgress(percent)"},{"type":"INSERT","lineNumber":230,"content":"                if (percent != lastEmit) {"},{"type":"INSERT","lineNumber":231,"content":"                    lastEmit = percent"},{"type":"INSERT","lineNumber":232,"content":"                    onProgress(percent)"}]},{"timestamp":1756376097996,"changes":[{"type":"MODIFY","lineNumber":52,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":129,"content":"            // Use generic content type per server snippet","oldContent":"            val mediaType = guessAudioMimeType(file.name).toMediaType()"},{"type":"INSERT","lineNumber":130,"content":"            val mediaType = \"application/octet-stream\".toMediaType()"},{"type":"DELETE","lineNumber":131,"oldContent":"            }"},{"type":"INSERT","lineNumber":133,"content":"            }"},{"type":"DELETE","lineNumber":153,"oldContent":"                    val snippet = if (bodyStr.length > 200) bodyStr.substring(0, 200) + \"…\" else bodyStr"},{"type":"INSERT","lineNumber":155,"content":"                    val snippet = if (bodyStr.length > 200) bodyStr.substring(0, 200) + \"…\" else bodyStr"},{"type":"DELETE","lineNumber":156,"oldContent":"            }"},{"type":"INSERT","lineNumber":158,"content":"            }"},{"type":"DELETE","lineNumber":163,"oldContent":"            stopSelf()"},{"type":"DELETE","lineNumber":165,"oldContent":"        }"},{"type":"DELETE","lineNumber":167,"oldContent":"    }"},{"type":"DELETE","lineNumber":169,"oldContent":""},{"type":"DELETE","lineNumber":171,"oldContent":"    private fun showToast(message: String) {"},{"type":"DELETE","lineNumber":173,"oldContent":"        Handler(Looper.getMainLooper()).post {"},{"type":"DELETE","lineNumber":175,"oldContent":"            android.widget.Toast.makeText(applicationContext, message, android.widget.Toast.LENGTH_LONG).show()"},{"type":"DELETE","lineNumber":177,"oldContent":"    private fun guessAudioMimeType(name: String): String {"},{"type":"DELETE","lineNumber":178,"oldContent":"        val lower = name.lowercase()"},{"type":"DELETE","lineNumber":179,"oldContent":"        return when {"},{"type":"DELETE","lineNumber":180,"oldContent":"            lower.endsWith(\".mp3\") -> \"audio/mpeg\""},{"type":"INSERT","lineNumber":171,"content":"            stopSelf()"},{"type":"INSERT","lineNumber":172,"content":"        }"},{"type":"INSERT","lineNumber":173,"content":"    }"},{"type":"INSERT","lineNumber":174,"content":""},{"type":"DELETE","lineNumber":183,"oldContent":"            lower.endsWith(\".m4a\") -> \"audio/mp4\""},{"type":"DELETE","lineNumber":185,"oldContent":"            lower.endsWith(\".aac\") -> \"audio/aac\""},{"type":"DELETE","lineNumber":188,"oldContent":"            lower.endsWith(\".wav\") -> \"audio/wav\""},{"type":"DELETE","lineNumber":190,"oldContent":"            lower.endsWith(\".ogg\") || lower.endsWith(\".oga\") -> \"audio/ogg\""},{"type":"DELETE","lineNumber":192,"oldContent":"            lower.endsWith(\".3gp\") || lower.endsWith(\".3gpp\") -> \"audio/3gpp\""},{"type":"DELETE","lineNumber":194,"oldContent":"            lower.endsWith(\".amr\") -> \"audio/amr\""},{"type":"DELETE","lineNumber":196,"oldContent":"            else -> \"application/octet-stream\""},{"type":"DELETE","lineNumber":198,"oldContent":"        }"},{"type":"DELETE","lineNumber":200,"oldContent":"    }"},{"type":"DELETE","lineNumber":202,"oldContent":"}"},{"type":"INSERT","lineNumber":189,"content":"    private fun showToast(message: String) {"},{"type":"INSERT","lineNumber":190,"content":"        Handler(Looper.getMainLooper()).post {"},{"type":"INSERT","lineNumber":191,"content":"            android.widget.Toast.makeText(applicationContext, message, android.widget.Toast.LENGTH_LONG).show()"},{"type":"INSERT","lineNumber":192,"content":"        }"},{"type":"INSERT","lineNumber":193,"content":"    }"},{"type":"INSERT","lineNumber":195,"content":"    private fun guessAudioMimeType(name: String): String {"},{"type":"INSERT","lineNumber":196,"content":"        val lower = name.lowercase()"},{"type":"INSERT","lineNumber":197,"content":"        return when {"},{"type":"INSERT","lineNumber":198,"content":"            lower.endsWith(\".mp3\") -> \"audio/mpeg\""},{"type":"INSERT","lineNumber":199,"content":"            lower.endsWith(\".m4a\") -> \"audio/mp4\""},{"type":"INSERT","lineNumber":200,"content":"            lower.endsWith(\".aac\") -> \"audio/aac\""},{"type":"INSERT","lineNumber":201,"content":"            lower.endsWith(\".wav\") -> \"audio/wav\""},{"type":"INSERT","lineNumber":202,"content":"            lower.endsWith(\".ogg\") || lower.endsWith(\".oga\") -> \"audio/ogg\""},{"type":"INSERT","lineNumber":203,"content":"            lower.endsWith(\".3gp\") || lower.endsWith(\".3gpp\") -> \"audio/3gpp\""},{"type":"INSERT","lineNumber":204,"content":"            lower.endsWith(\".amr\") -> \"audio/amr\""},{"type":"INSERT","lineNumber":205,"content":"            else -> \"application/octet-stream\""},{"type":"INSERT","lineNumber":206,"content":"        }"},{"type":"INSERT","lineNumber":207,"content":"    }"},{"type":"INSERT","lineNumber":208,"content":"}"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"DELETE","lineNumber":210,"oldContent":"        }"},{"type":"DELETE","lineNumber":212,"oldContent":"    }"},{"type":"DELETE","lineNumber":214,"oldContent":""},{"type":"INSERT","lineNumber":220,"content":"    override fun writeTo(sink: okio.BufferedSink) {"},{"type":"INSERT","lineNumber":231,"content":"                if (percent != lastEmit) {"},{"type":"INSERT","lineNumber":232,"content":"                    lastEmit = percent"},{"type":"INSERT","lineNumber":233,"content":"                    onProgress(percent)"},{"type":"DELETE","lineNumber":237,"oldContent":"    override fun writeTo(sink: okio.BufferedSink) {"},{"type":"DELETE","lineNumber":244,"oldContent":"                    onProgress(percent)"},{"type":"DELETE","lineNumber":245,"oldContent":"                    lastEmit = percent"},{"type":"DELETE","lineNumber":246,"oldContent":"                if (percent != lastEmit) {"}]},{"timestamp":1756376158070,"changes":[{"type":"INSERT","lineNumber":51,"content":"    private var lastProgressPercent: Int = -1"},{"type":"DELETE","lineNumber":52,"oldContent":""},{"type":"INSERT","lineNumber":119,"content":"        val nameLower = file.name.lowercase()"},{"type":"INSERT","lineNumber":120,"content":"        val isSupported = nameLower.endsWith(\".mp3\") || nameLower.endsWith(\".wav\") || nameLower.endsWith(\".m4a\")"},{"type":"INSERT","lineNumber":121,"content":"        if (!isSupported) {"},{"type":"INSERT","lineNumber":122,"content":"            val msg = getString(R.string.upload_failed) + \": Formato de arquivo não suportado. Use MP3, WAV ou M4A\""},{"type":"INSERT","lineNumber":123,"content":"            notificationManager.notify(NOTIF_ID, buildNotification(msg))"},{"type":"INSERT","lineNumber":124,"content":"            showToast(msg)"},{"type":"INSERT","lineNumber":125,"content":"            if (Build.VERSION.SDK_INT > Build.VERSION_CODES.S_V2) {"},{"type":"INSERT","lineNumber":126,"content":"                stopForeground(STOP_FOREGROUND_REMOVE)"},{"type":"INSERT","lineNumber":127,"content":"            } else {"},{"type":"INSERT","lineNumber":128,"content":"                @Suppress(\"DEPRECATION\")"},{"type":"INSERT","lineNumber":129,"content":"                stopForeground(true)"},{"type":"INSERT","lineNumber":130,"content":"            }"},{"type":"INSERT","lineNumber":131,"content":"            stopSelf()"},{"type":"INSERT","lineNumber":132,"content":"            return"},{"type":"INSERT","lineNumber":133,"content":"        }"},{"type":"DELETE","lineNumber":129,"oldContent":"            // Use generic content type per server snippet"},{"type":"DELETE","lineNumber":130,"oldContent":"            val mediaType = \"application/octet-stream\".toMediaType()"},{"type":"INSERT","lineNumber":144,"content":"            // Use precise content type"},{"type":"INSERT","lineNumber":145,"content":"            val mediaType = guessAudioMimeType(file.name).toMediaType()"},{"type":"INSERT","lineNumber":183,"content":"                @Suppress(\"DEPRECATION\")"},{"type":"INSERT","lineNumber":184,"content":"                stopForeground(true)"},{"type":"INSERT","lineNumber":185,"content":"            }"},{"type":"DELETE","lineNumber":170,"oldContent":"                @Suppress(\"DEPRECATION\")"},{"type":"DELETE","lineNumber":173,"oldContent":"                stopForeground(true)"},{"type":"DELETE","lineNumber":174,"oldContent":"            }"},{"type":"DELETE","lineNumber":180,"oldContent":"    private fun showToast(message: String) {"},{"type":"INSERT","lineNumber":196,"content":"        lastProgressPercent = percent"},{"type":"INSERT","lineNumber":197,"content":"        lastProgressEmitMs = now"},{"type":"INSERT","lineNumber":198,"content":"        notificationManager.notify("},{"type":"INSERT","lineNumber":199,"content":"            NOTIF_ID,"},{"type":"INSERT","lineNumber":200,"content":"            buildNotification(\"${getString(R.string.uploading_with_name, fileName)}  $percent%\")"},{"type":"INSERT","lineNumber":201,"content":"        )"},{"type":"INSERT","lineNumber":202,"content":"    }"},{"type":"INSERT","lineNumber":203,"content":""},{"type":"INSERT","lineNumber":204,"content":"    private fun showToast(message: String) {"},{"type":"DELETE","lineNumber":184,"oldContent":"        lastProgressPercent = percent"},{"type":"DELETE","lineNumber":187,"oldContent":"        lastProgressEmitMs = now"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"DELETE","lineNumber":189,"oldContent":"        notificationManager.notify("},{"type":"DELETE","lineNumber":192,"oldContent":"            NOTIF_ID,"},{"type":"DELETE","lineNumber":195,"oldContent":"            buildNotification(\"${getString(R.string.uploading_with_name, fileName)}  $percent%\")"},{"type":"DELETE","lineNumber":198,"oldContent":"        )"},{"type":"DELETE","lineNumber":201,"oldContent":"    }"},{"type":"DELETE","lineNumber":203,"oldContent":""},{"type":"DELETE","lineNumber":205,"oldContent":""},{"type":"DELETE","lineNumber":207,"oldContent":"private class ProgressRequestBody("},{"type":"DELETE","lineNumber":209,"oldContent":"    private val file: File,"},{"type":"DELETE","lineNumber":211,"oldContent":"    private val contentType: MediaType,"},{"type":"INSERT","lineNumber":225,"content":"private class ProgressRequestBody("},{"type":"INSERT","lineNumber":226,"content":"    private val file: File,"},{"type":"INSERT","lineNumber":227,"content":"    private val contentType: MediaType,"},{"type":"DELETE","lineNumber":220,"oldContent":"        val length = contentLength()"},{"type":"INSERT","lineNumber":236,"content":"        val length = contentLength()"},{"type":"INSERT","lineNumber":246,"content":"                if (percent != lastEmit) {"},{"type":"INSERT","lineNumber":247,"content":"                    lastEmit = percent"},{"type":"INSERT","lineNumber":248,"content":"                    onProgress(percent)"},{"type":"DELETE","lineNumber":233,"oldContent":"                if (percent != lastEmit) {"},{"type":"DELETE","lineNumber":235,"oldContent":"                    lastEmit = percent"},{"type":"DELETE","lineNumber":237,"oldContent":"                    onProgress(percent)"}]},{"timestamp":1756376173088,"changes":[{"type":"DELETE","lineNumber":120,"oldContent":"        try {"},{"type":"DELETE","lineNumber":122,"oldContent":"            updateNotificationText(getString(R.string.uploading))"},{"type":"DELETE","lineNumber":124,"oldContent":""},{"type":"DELETE","lineNumber":126,"oldContent":"            val client = OkHttpClient.Builder()"},{"type":"DELETE","lineNumber":128,"oldContent":"                .connectTimeout(30, TimeUnit.SECONDS)"},{"type":"DELETE","lineNumber":130,"oldContent":"                .readTimeout(60, TimeUnit.SECONDS)"},{"type":"DELETE","lineNumber":132,"oldContent":"                .callTimeout(60, TimeUnit.SECONDS)"},{"type":"DELETE","lineNumber":134,"oldContent":"                .retryOnConnectionFailure(true)"},{"type":"DELETE","lineNumber":136,"oldContent":"                .build()"},{"type":"DELETE","lineNumber":138,"oldContent":""},{"type":"DELETE","lineNumber":142,"oldContent":"            val progressBody = ProgressRequestBody(file, mediaType) { percent ->"},{"type":"DELETE","lineNumber":144,"oldContent":"                updateProgress(file.name, percent)"},{"type":"INSERT","lineNumber":134,"content":"        try {"},{"type":"INSERT","lineNumber":135,"content":"            updateNotificationText(getString(R.string.uploading))"},{"type":"INSERT","lineNumber":136,"content":""},{"type":"INSERT","lineNumber":137,"content":"            val client = OkHttpClient.Builder()"},{"type":"INSERT","lineNumber":138,"content":"                .connectTimeout(30, TimeUnit.SECONDS)"},{"type":"INSERT","lineNumber":139,"content":"                .readTimeout(60, TimeUnit.SECONDS)"},{"type":"INSERT","lineNumber":140,"content":"                .callTimeout(60, TimeUnit.SECONDS)"},{"type":"INSERT","lineNumber":141,"content":"                .retryOnConnectionFailure(true)"},{"type":"INSERT","lineNumber":142,"content":"                .build()"},{"type":"INSERT","lineNumber":143,"content":""},{"type":"INSERT","lineNumber":144,"content":"            // Use precise content type"},{"type":"INSERT","lineNumber":145,"content":"            val mediaType = guessAudioMimeType(file.name).toMediaType()"},{"type":"INSERT","lineNumber":146,"content":"            val progressBody = ProgressRequestBody(file, mediaType) { percent ->"},{"type":"INSERT","lineNumber":147,"content":"                updateProgress(file.name, percent)"},{"type":"DELETE","lineNumber":157,"oldContent":"            // Use precise content type"},{"type":"DELETE","lineNumber":159,"oldContent":"            val mediaType = guessAudioMimeType(file.name).toMediaType()"},{"type":"INSERT","lineNumber":183,"content":"                @Suppress(\"DEPRECATION\")"},{"type":"INSERT","lineNumber":184,"content":"                stopForeground(true)"},{"type":"INSERT","lineNumber":185,"content":"            }"},{"type":"INSERT","lineNumber":196,"content":"        lastProgressPercent = percent"},{"type":"INSERT","lineNumber":197,"content":"        lastProgressEmitMs = now"},{"type":"INSERT","lineNumber":198,"content":"        notificationManager.notify("},{"type":"INSERT","lineNumber":199,"content":"            NOTIF_ID,"},{"type":"INSERT","lineNumber":200,"content":"            buildNotification(\"${getString(R.string.uploading_with_name, fileName)}  $percent%\")"},{"type":"INSERT","lineNumber":201,"content":"        )"},{"type":"INSERT","lineNumber":202,"content":"    }"},{"type":"INSERT","lineNumber":203,"content":""},{"type":"INSERT","lineNumber":204,"content":"    private fun showToast(message: String) {"},{"type":"DELETE","lineNumber":194,"oldContent":"                @Suppress(\"DEPRECATION\")"},{"type":"DELETE","lineNumber":196,"oldContent":"                stopForeground(true)"},{"type":"DELETE","lineNumber":197,"oldContent":"            }"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"DELETE","lineNumber":205,"oldContent":"        lastProgressPercent = percent"},{"type":"DELETE","lineNumber":207,"oldContent":"        lastProgressEmitMs = now"},{"type":"DELETE","lineNumber":209,"oldContent":"        notificationManager.notify("},{"type":"DELETE","lineNumber":210,"oldContent":"            NOTIF_ID,"},{"type":"DELETE","lineNumber":212,"oldContent":"            buildNotification(\"${getString(R.string.uploading_with_name, fileName)}  $percent%\")"},{"type":"DELETE","lineNumber":214,"oldContent":"        )"},{"type":"DELETE","lineNumber":215,"oldContent":"    }"},{"type":"DELETE","lineNumber":217,"oldContent":""},{"type":"DELETE","lineNumber":218,"oldContent":"    private fun showToast(message: String) {"},{"type":"DELETE","lineNumber":222,"oldContent":""},{"type":"INSERT","lineNumber":225,"content":"private class ProgressRequestBody("},{"type":"INSERT","lineNumber":226,"content":"    private val file: File,"},{"type":"INSERT","lineNumber":227,"content":"    private val contentType: MediaType,"},{"type":"INSERT","lineNumber":236,"content":"        val length = contentLength()"},{"type":"DELETE","lineNumber":236,"oldContent":"private class ProgressRequestBody("},{"type":"DELETE","lineNumber":238,"oldContent":"    private val file: File,"},{"type":"DELETE","lineNumber":240,"oldContent":"    private val contentType: MediaType,"},{"type":"INSERT","lineNumber":246,"content":"                if (percent != lastEmit) {"},{"type":"INSERT","lineNumber":247,"content":"                    lastEmit = percent"},{"type":"INSERT","lineNumber":248,"content":"                    onProgress(percent)"},{"type":"DELETE","lineNumber":248,"oldContent":"        val length = contentLength()"},{"type":"DELETE","lineNumber":258,"oldContent":"                if (percent != lastEmit) {"},{"type":"DELETE","lineNumber":260,"oldContent":"                    lastEmit = percent"},{"type":"DELETE","lineNumber":262,"oldContent":"                    onProgress(percent)"}]},{"timestamp":1756376682416,"changes":[{"type":"MODIFY","lineNumber":120,"content":"        val isSupported = nameLower.endsWith(\".mp3\") || nameLower.endsWith(\".wav\") || nameLower.endsWith(\".m4a\") || nameLower.endsWith(\".mp4\") || nameLower.endsWith(\".m4v\")","oldContent":"        val isSupported = nameLower.endsWith(\".mp3\") || nameLower.endsWith(\".wav\") || nameLower.endsWith(\".m4a\")"},{"type":"MODIFY","lineNumber":122,"content":"            val msg = getString(R.string.upload_failed) + \": Formato não suportado. Use MP3, WAV, M4A, MP4 ou M4V\"","oldContent":"            val msg = getString(R.string.upload_failed) + \": Formato de arquivo não suportado. Use MP3, WAV ou M4A\""},{"type":"INSERT","lineNumber":127,"content":"            } else {"},{"type":"INSERT","lineNumber":128,"content":"                @Suppress(\"DEPRECATION\")"},{"type":"INSERT","lineNumber":129,"content":"                stopForeground(true)"},{"type":"INSERT","lineNumber":130,"content":"            }"},{"type":"INSERT","lineNumber":131,"content":"            stopSelf()"},{"type":"INSERT","lineNumber":132,"content":"            return"},{"type":"INSERT","lineNumber":133,"content":"        }"},{"type":"DELETE","lineNumber":129,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":132,"oldContent":"                @Suppress(\"DEPRECATION\")"},{"type":"DELETE","lineNumber":135,"oldContent":"                stopForeground(true)"},{"type":"DELETE","lineNumber":137,"oldContent":"            }"},{"type":"DELETE","lineNumber":139,"oldContent":"            stopSelf()"},{"type":"DELETE","lineNumber":142,"oldContent":"            return"},{"type":"DELETE","lineNumber":145,"oldContent":"        }"},{"type":"MODIFY","lineNumber":148,"content":"            }","oldContent":"            }"},{"type":"DELETE","lineNumber":184,"oldContent":"            stopSelf()"},{"type":"MODIFY","lineNumber":186,"content":"            stopSelf()","oldContent":"        }"},{"type":"INSERT","lineNumber":187,"content":"        }"},{"type":"DELETE","lineNumber":196,"oldContent":"        Handler(Looper.getMainLooper()).post {"},{"type":"DELETE","lineNumber":197,"oldContent":"            android.widget.Toast.makeText(applicationContext, message, android.widget.Toast.LENGTH_LONG).show()"},{"type":"DELETE","lineNumber":201,"oldContent":"        }"},{"type":"DELETE","lineNumber":203,"oldContent":"    }"},{"type":"DELETE","lineNumber":205,"oldContent":"    private fun guessAudioMimeType(name: String): String {"},{"type":"DELETE","lineNumber":207,"oldContent":"        val lower = name.lowercase()"},{"type":"DELETE","lineNumber":209,"oldContent":"        return when {"},{"type":"DELETE","lineNumber":211,"oldContent":"            lower.endsWith(\".mp3\") -> \"audio/mpeg\""},{"type":"INSERT","lineNumber":205,"content":"        Handler(Looper.getMainLooper()).post {"},{"type":"INSERT","lineNumber":206,"content":"            android.widget.Toast.makeText(applicationContext, message, android.widget.Toast.LENGTH_LONG).show()"},{"type":"INSERT","lineNumber":207,"content":"        }"},{"type":"INSERT","lineNumber":208,"content":"    }"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"INSERT","lineNumber":210,"content":"    private fun guessAudioMimeType(name: String): String {"},{"type":"INSERT","lineNumber":211,"content":"        val lower = name.lowercase()"},{"type":"INSERT","lineNumber":212,"content":"        return when {"},{"type":"INSERT","lineNumber":213,"content":"            lower.endsWith(\".mp3\") -> \"audio/mpeg\""},{"type":"INSERT","lineNumber":215,"content":"            lower.endsWith(\".mp4\") -> \"video/mp4\""},{"type":"INSERT","lineNumber":216,"content":"            lower.endsWith(\".m4v\") -> \"video/mp4\""},{"type":"DELETE","lineNumber":216,"oldContent":""},{"type":"DELETE","lineNumber":226,"oldContent":"    private val onProgress: (Int) -> Unit"},{"type":"DELETE","lineNumber":228,"oldContent":") : RequestBody() {"},{"type":"INSERT","lineNumber":230,"content":"    private val onProgress: (Int) -> Unit"},{"type":"INSERT","lineNumber":231,"content":") : RequestBody() {"},{"type":"INSERT","lineNumber":238,"content":"        val length = contentLength()"},{"type":"DELETE","lineNumber":239,"oldContent":"        val length = contentLength()"},{"type":"DELETE","lineNumber":246,"oldContent":"                }"},{"type":"DELETE","lineNumber":248,"oldContent":"            }"},{"type":"MODIFY","lineNumber":251,"content":"                }","oldContent":"        }"},{"type":"INSERT","lineNumber":252,"content":"            }"},{"type":"INSERT","lineNumber":253,"content":"        }"}]},{"timestamp":1756376973503,"changes":[{"type":"DELETE","lineNumber":128,"oldContent":"        try {"},{"type":"DELETE","lineNumber":130,"oldContent":"            updateNotificationText(getString(R.string.uploading))"},{"type":"DELETE","lineNumber":133,"oldContent":""},{"type":"DELETE","lineNumber":135,"oldContent":"            val client = OkHttpClient.Builder()"},{"type":"INSERT","lineNumber":134,"content":"        try {"},{"type":"INSERT","lineNumber":135,"content":"            updateNotificationText(getString(R.string.uploading))"},{"type":"INSERT","lineNumber":136,"content":""},{"type":"INSERT","lineNumber":137,"content":"            val client = OkHttpClient.Builder()"},{"type":"MODIFY","lineNumber":145,"content":"            val chosenMime = guessAudioMimeType(file.name)","oldContent":"            val mediaType = guessAudioMimeType(file.name).toMediaType()"},{"type":"INSERT","lineNumber":146,"content":"            val mediaType = chosenMime.toMediaType()"},{"type":"INSERT","lineNumber":148,"content":"                updateProgress(file.name, percent)"},{"type":"DELETE","lineNumber":148,"oldContent":"            }"},{"type":"MODIFY","lineNumber":172,"content":"                    showToast(getString(R.string.upload_failed) + \": \" + snippet +","oldContent":"                    showToast(getString(R.string.upload_failed) + \": \" + snippet)"},{"type":"INSERT","lineNumber":173,"content":"                        \"\\nfile=\" + file.name + \", mime=\" + chosenMime)"},{"type":"INSERT","lineNumber":187,"content":"            }"},{"type":"DELETE","lineNumber":187,"oldContent":"            }"},{"type":"INSERT","lineNumber":203,"content":"        )"},{"type":"INSERT","lineNumber":204,"content":"    }"},{"type":"INSERT","lineNumber":205,"content":""},{"type":"INSERT","lineNumber":206,"content":"    private fun showToast(message: String) {"},{"type":"DELETE","lineNumber":203,"oldContent":"        )"},{"type":"DELETE","lineNumber":206,"oldContent":"    }"},{"type":"DELETE","lineNumber":209,"oldContent":""},{"type":"DELETE","lineNumber":212,"oldContent":"    private fun showToast(message: String) {"},{"type":"DELETE","lineNumber":215,"oldContent":"            lower.endsWith(\".aac\") -> \"audio/aac\""},{"type":"DELETE","lineNumber":217,"oldContent":"            lower.endsWith(\".wav\") -> \"audio/wav\""},{"type":"INSERT","lineNumber":219,"content":"            lower.endsWith(\".aac\") -> \"audio/aac\""},{"type":"INSERT","lineNumber":220,"content":"            lower.endsWith(\".wav\") -> \"audio/wav\""},{"type":"DELETE","lineNumber":231,"oldContent":""},{"type":"INSERT","lineNumber":234,"content":""},{"type":"INSERT","lineNumber":240,"content":"        val length = contentLength()"},{"type":"DELETE","lineNumber":240,"oldContent":"        val length = contentLength()"},{"type":"DELETE","lineNumber":250,"oldContent":"        }"},{"type":"INSERT","lineNumber":252,"content":"                    onProgress(percent)"},{"type":"DELETE","lineNumber":253,"oldContent":"    }"},{"type":"INSERT","lineNumber":256,"content":"    }"}]},{"timestamp":1756377007646,"changes":[{"type":"DELETE","lineNumber":131,"oldContent":"        try {"},{"type":"INSERT","lineNumber":132,"content":"            return"},{"type":"INSERT","lineNumber":133,"content":"        }"},{"type":"INSERT","lineNumber":134,"content":"        try {"},{"type":"DELETE","lineNumber":135,"oldContent":"            return"},{"type":"DELETE","lineNumber":137,"oldContent":"        }"},{"type":"MODIFY","lineNumber":149,"content":"            }","oldContent":"            }"},{"type":"DELETE","lineNumber":172,"oldContent":"                    showToast(getString(R.string.upload_failed) + \": \" + snippet)"},{"type":"INSERT","lineNumber":174,"content":"                }"},{"type":"INSERT","lineNumber":187,"content":"            }"},{"type":"DELETE","lineNumber":189,"oldContent":"            }"},{"type":"DELETE","lineNumber":203,"oldContent":"        Handler(Looper.getMainLooper()).post {"},{"type":"DELETE","lineNumber":204,"oldContent":"            android.widget.Toast.makeText(applicationContext, message, android.widget.Toast.LENGTH_LONG).show()"},{"type":"DELETE","lineNumber":207,"oldContent":"        }"},{"type":"DELETE","lineNumber":209,"oldContent":"    }"},{"type":"INSERT","lineNumber":207,"content":"        Handler(Looper.getMainLooper()).post {"},{"type":"INSERT","lineNumber":208,"content":"            android.widget.Toast.makeText(applicationContext, message, android.widget.Toast.LENGTH_LONG).show()"},{"type":"INSERT","lineNumber":209,"content":"        }"},{"type":"INSERT","lineNumber":210,"content":"    }"},{"type":"MODIFY","lineNumber":221,"content":"            lower.endsWith(\".ogg\") || lower.endsWith(\".oga\") -> \"audio/ogg\"","oldContent":"            lower.endsWith(\".ogg\") || lower.endsWith(\".oga\") -> \"audio/ogg\""},{"type":"INSERT","lineNumber":234,"content":""},{"type":"DELETE","lineNumber":236,"oldContent":""},{"type":"INSERT","lineNumber":240,"content":"        val length = contentLength()"},{"type":"DELETE","lineNumber":242,"oldContent":"        val length = contentLength()"},{"type":"MODIFY","lineNumber":253,"content":"                }","oldContent":"                }"},{"type":"MODIFY","lineNumber":257,"content":"","oldContent":""}]}]},"C:/Users/isacataria/Documents/GitHub/AudioRecorder/app/src/main/res/drawable/baseline_cloud_upload_24.xml":{"filePath":"C:/Users/isacataria/Documents/GitHub/AudioRecorder/app/src/main/res/drawable/baseline_cloud_upload_24.xml","baseContent":"<vector xmlns:android=\"http://schemas.android.com/apk/res/android\" android:height=\"24dp\" android:tint=\"#FFFFF\" android:viewportHeight=\"24\" android:viewportWidth=\"24\" android:width=\"24dp\">\n      \n    <path android:fillColor=\"@android:color/white\" android:pathData=\"M19.35,10.04C18.67,6.59 15.64,4 12,4 9.11,4 6.6,5.64 5.35,8.04 2.34,8.36 0,10.91 0,14c0,3.31 2.69,6 6,6h13c2.76,0 5,-2.24 5,-5 0,-2.64 -2.05,-4.78 -4.65,-4.96zM14,13v4h-4v-4H7l5,-5 5,5h-3z\"/>\n    \n</vector>\n","baseTimestamp":1756375584305,"deltas":[{"timestamp":1756375586383,"changes":[{"type":"MODIFY","lineNumber":0,"content":"<vector xmlns:android=\"http://schemas.android.com/apk/res/android\" android:height=\"24dp\" android:tint=\"#FFFFFF\" android:viewportHeight=\"24\" android:viewportWidth=\"24\" android:width=\"24dp\">","oldContent":"<vector xmlns:android=\"http://schemas.android.com/apk/res/android\" android:height=\"24dp\" android:tint=\"#FFFFF\" android:viewportHeight=\"24\" android:viewportWidth=\"24\" android:width=\"24dp\">"}]}]}}}